/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Sample3WildToken,
  Sample3WildTokenInterface,
} from "../../../contracts/ERC20.sol/Sample3WildToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "creator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "generateTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610c32380380610c3283398101604081905261002f91610212565b6040518060400160405280601081526020016f29b0b6b8363299abb4b6322a37b5b2b760811b8152506040518060400160405280600381526020016253573360e81b815250816003908161008391906102ca565b50600461009082826102ca565b50503360808190526100a39150826100a9565b506103af565b6001600160a01b0382166100d85760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b6100e4600083836100e8565b5050565b6001600160a01b0383166101135780600260008282546101089190610388565b909155506101859050565b6001600160a01b038316600090815260208190526040902054818110156101665760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016100cf565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166101a1576002805482900390556101c0565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161020591815260200190565b60405180910390a3505050565b60006020828403121561022457600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061025557607f821691505b60208210810361027557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102c557806000526020600020601f840160051c810160208510156102a25750805b601f840160051c820191505b818110156102c257600081556001016102ae565b50505b505050565b81516001600160401b038111156102e3576102e361022b565b6102f7816102f18454610241565b8461027b565b6020601f82116001811461032b57600083156103135750848201515b600019600385901b1c1916600184901b1784556102c2565b600084815260208120601f198516915b8281101561035b578785015182556020948501946001909201910161033b565b50848210156103795786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b808201808211156103a957634e487b7160e01b600052601160045260246000fd5b92915050565b6080516108626103d06000396000818160be01526102e901526108626000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806340c10f191161007157806340c10f191461016957806370a082311461017e578063827f32c0146101a757806395d89b41146101ba578063a9059cbb146101c2578063dd62ed3e146101d557600080fd5b806302d05d3f146100b957806306fdde03146100fd578063095ea7b31461011257806318160ddd1461013557806323b872dd14610147578063313ce5671461015a575b600080fd5b6100e07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61010561020e565b6040516100f491906106ab565b610125610120366004610715565b6102a0565b60405190151581526020016100f4565b6002545b6040519081526020016100f4565b61012561015536600461073f565b6102ba565b604051601281526020016100f4565b61017c610177366004610715565b6102de565b005b61013961018c36600461077c565b6001600160a01b031660009081526020819052604090205490565b61017c6101b5366004610715565b61035b565b610105610369565b6101256101d0366004610715565b610378565b6101396101e336600461079e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461021d906107d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610249906107d1565b80156102965780601f1061026b57610100808354040283529160200191610296565b820191906000526020600020905b81548152906001019060200180831161027957829003601f168201915b5050505050905090565b6000336102ae818585610386565b60019150505b92915050565b6000336102c8858285610398565b6102d3858585610417565b506001949350505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461035b5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792063726561746f722063616e206d696e7420746f6b656e730000000060448201526064015b60405180910390fd5b6103658282610476565b5050565b60606004805461021d906107d1565b6000336102ae818585610417565b61039383838360016104ac565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811015610411578181101561040257604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610352565b610411848484840360006104ac565b50505050565b6001600160a01b03831661044157604051634b637e8f60e11b815260006004820152602401610352565b6001600160a01b03821661046b5760405163ec442f0560e01b815260006004820152602401610352565b610393838383610581565b6001600160a01b0382166104a05760405163ec442f0560e01b815260006004820152602401610352565b61036560008383610581565b6001600160a01b0384166104d65760405163e602df0560e01b815260006004820152602401610352565b6001600160a01b03831661050057604051634a1406b160e11b815260006004820152602401610352565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561041157826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161057391815260200190565b60405180910390a350505050565b6001600160a01b0383166105ac5780600260008282546105a1919061080b565b9091555061061e9050565b6001600160a01b038316600090815260208190526040902054818110156105ff5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610352565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661063a57600280548290039055610659565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161069e91815260200190565b60405180910390a3505050565b602081526000825180602084015260005b818110156106d957602081860181015160408684010152016106bc565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461071057600080fd5b919050565b6000806040838503121561072857600080fd5b610731836106f9565b946020939093013593505050565b60008060006060848603121561075457600080fd5b61075d846106f9565b925061076b602085016106f9565b929592945050506040919091013590565b60006020828403121561078e57600080fd5b610797826106f9565b9392505050565b600080604083850312156107b157600080fd5b6107ba836106f9565b91506107c8602084016106f9565b90509250929050565b600181811c908216806107e557607f821691505b60208210810361080557634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102b457634e487b7160e01b600052601160045260246000fdfea2646970667358221220090039a3ffbece582e84dd65bd79219f7abf84524f263e97bdebae9e686598b164736f6c634300081c0033";

type Sample3WildTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Sample3WildTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Sample3WildToken__factory extends ContractFactory {
  constructor(...args: Sample3WildTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialSupply, overrides || {});
  }
  override deploy(
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialSupply, overrides || {}) as Promise<
      Sample3WildToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Sample3WildToken__factory {
    return super.connect(runner) as Sample3WildToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Sample3WildTokenInterface {
    return new Interface(_abi) as Sample3WildTokenInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Sample3WildToken {
    return new Contract(address, _abi, runner) as unknown as Sample3WildToken;
  }
}
