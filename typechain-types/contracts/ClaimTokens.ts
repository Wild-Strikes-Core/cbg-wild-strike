/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ClaimTokensInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "betAmount"
      | "checkContractBalance"
      | "checkPlayerBalance"
      | "declareWinner"
      | "gameStarted"
      | "joinGame"
      | "player1"
      | "player2"
      | "token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameReset"
      | "GameStarted"
      | "TokensDeposited"
      | "WinnerDeclared"
  ): EventFragment;

  encodeFunctionData(functionFragment: "betAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkPlayerBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "declareWinner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gameStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "player1", values?: undefined): string;
  encodeFunctionData(functionFragment: "player2", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "betAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPlayerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declareWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace GameResetEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [
    player1: AddressLike,
    player2: AddressLike,
    betAmount: BigNumberish
  ];
  export type OutputTuple = [
    player1: string,
    player2: string,
    betAmount: bigint
  ];
  export interface OutputObject {
    player1: string;
    player2: string;
    betAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensDepositedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerDeclaredEvent {
  export type InputTuple = [winner: AddressLike, prizeAmount: BigNumberish];
  export type OutputTuple = [winner: string, prizeAmount: bigint];
  export interface OutputObject {
    winner: string;
    prizeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ClaimTokens extends BaseContract {
  connect(runner?: ContractRunner | null): ClaimTokens;
  waitForDeployment(): Promise<this>;

  interface: ClaimTokensInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  betAmount: TypedContractMethod<[], [bigint], "view">;

  checkContractBalance: TypedContractMethod<[], [bigint], "view">;

  checkPlayerBalance: TypedContractMethod<
    [player: AddressLike],
    [bigint],
    "view"
  >;

  declareWinner: TypedContractMethod<
    [winner: AddressLike],
    [void],
    "nonpayable"
  >;

  gameStarted: TypedContractMethod<[], [boolean], "view">;

  joinGame: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  player1: TypedContractMethod<[], [string], "view">;

  player2: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "betAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkPlayerBalance"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "declareWinner"
  ): TypedContractMethod<[winner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gameStarted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "player1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "player2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "GameReset"
  ): TypedContractEvent<
    GameResetEvent.InputTuple,
    GameResetEvent.OutputTuple,
    GameResetEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "TokensDeposited"
  ): TypedContractEvent<
    TokensDepositedEvent.InputTuple,
    TokensDepositedEvent.OutputTuple,
    TokensDepositedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerDeclared"
  ): TypedContractEvent<
    WinnerDeclaredEvent.InputTuple,
    WinnerDeclaredEvent.OutputTuple,
    WinnerDeclaredEvent.OutputObject
  >;

  filters: {
    "GameReset()": TypedContractEvent<
      GameResetEvent.InputTuple,
      GameResetEvent.OutputTuple,
      GameResetEvent.OutputObject
    >;
    GameReset: TypedContractEvent<
      GameResetEvent.InputTuple,
      GameResetEvent.OutputTuple,
      GameResetEvent.OutputObject
    >;

    "GameStarted(address,address,uint256)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "TokensDeposited(address,uint256)": TypedContractEvent<
      TokensDepositedEvent.InputTuple,
      TokensDepositedEvent.OutputTuple,
      TokensDepositedEvent.OutputObject
    >;
    TokensDeposited: TypedContractEvent<
      TokensDepositedEvent.InputTuple,
      TokensDepositedEvent.OutputTuple,
      TokensDepositedEvent.OutputObject
    >;

    "WinnerDeclared(address,uint256)": TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
    WinnerDeclared: TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
  };
}
